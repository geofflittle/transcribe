/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package transcribe;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;

import com.google.inject.Guice;
import com.google.inject.Injector;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import transcribe.config.AppModule;
import transcribe.services.TranscriptProcessor;

// TODO: Get app to read logging.properties file
@Slf4j
public class App {

    @SneakyThrows
    private static CommandLine getParsedArgs(String[] args) {
        Options options = new Options();
        options.addOption(Option.builder("i")
                .argName("inputAudioFile")
                .desc("Input audio file to transcribe")
                .optionalArg(false)
                .hasArg()
                .build());
        options.addOption(Option.builder("o")
                .argName("outputDir")
                .desc("Directory for output files")
                .optionalArg(false)
                .hasArg()
                .build());
        options.addOption(Option.builder("t")
                .argName("documentTitle")
                .desc("Output transcript document title")
                .optionalArg(false)
                .hasArg()
                .build());
        options.addOption(Option.builder("c")
                .argName("caseName")
                .desc("Output transcript case name")
                .optionalArg(false)
                .hasArg()
                .build());
        // options.addOption(Option.builder("t")
        // .argName("transcriptDir")
        // .desc("Directory of transcript .txt files")
        // .optionalArg(true)
        // .hasArg()
        // .build());
        CommandLineParser parser = new DefaultParser();
        return parser.parse(options, args);
    }

    public static void main(String[] args) {
        Injector injector = Guice.createInjector(new AppModule());
        CommandLine cmd = getParsedArgs(args);
        String inputAudioFile = cmd.getOptionValue("i");
        String outputDir = cmd.getOptionValue("o");
        String documentTitle = cmd.getOptionValue("t");
        String caseName = cmd.getOptionValue("c");
        log.info("Processing with input file {} to {}", inputAudioFile, outputDir);
        TranscriptProcessor processor = injector.getInstance(TranscriptProcessor.class);
        processor.process(inputAudioFile, outputDir, documentTitle, caseName);
        log.info("Processed input file {} to {}", inputAudioFile, outputDir);
    }
}
