/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package transcribe;

import java.io.IOException;
import java.nio.file.Path;
import java.time.ZoneId;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.lang3.tuple.Pair;

import com.google.inject.Guice;
import com.google.inject.Injector;

import freemarker.template.TemplateException;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import transcribe.config.AppModule;
import transcribe.services.CourtSmartZipTranscriber;
import transcribe.services.PrereqEnsurer;

// TODO: Get app to read logging.properties file
@Slf4j
public class App {

    @SneakyThrows
    private static Pair<Options, CommandLine> getParsedArgs(String[] args) {
        Options options = new Options();
        options.addOption(Option.builder("h")
                .argName("help")
                .desc("Help information")
                .optionalArg(true)
                .build());
        options.addOption(Option.builder("z")
                .argName("courtSmartZipPath")
                .desc("CourtSmart zip file path")
                .optionalArg(false)
                .hasArg()
                .build());
        options.addOption(Option.builder("t")
                .argName("zoneId")
                .desc("The time zone of the audio in the CourtSmart zip")
                .optionalArg(false)
                .hasArg()
                .build());
        options.addOption(Option.builder("o")
                .argName("outputDir")
                .desc("Directory for output files")
                .optionalArg(false)
                .hasArg()
                .build());
        CommandLineParser parser = new DefaultParser();
        return Pair.of(options, parser.parse(options, args));
    }

    public static void main(String[] args) throws IOException, InterruptedException, TemplateException {
        Injector injector = Guice.createInjector(new AppModule());
        PrereqEnsurer ensurer = injector.getInstance(PrereqEnsurer.class);
        ensurer.ensure().join();

        Pair<Options, CommandLine> optsAndCmd = getParsedArgs(args);
        CommandLine cmd = optsAndCmd.getRight();
        if (cmd.hasOption("h")) {
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("ant", optsAndCmd.getLeft());
            return;
        }
        String courtSmartZipFileStr = cmd.getOptionValue("z");
        String zoneIdStr = cmd.getOptionValue("t");
        String outputDirStr = cmd.getOptionValue("o");

        log.info("Processing with input file {}", courtSmartZipFileStr);
        CourtSmartZipTranscriber transcriber = injector.getInstance(CourtSmartZipTranscriber.class);
        // String documentTitle = "Document Title";
        // String caseName = "Steven Krawatsky, et al. v. Rachel Avrunin, et al.";
        // "America/New_York"
        transcriber.transcribe(Path.of(courtSmartZipFileStr), ZoneId.of(zoneIdStr), Path.of(outputDirStr));
        log.info("Processed input file {}", courtSmartZipFileStr);
    }
}
