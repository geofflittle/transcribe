/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package transcribe;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Key;
import com.google.inject.name.Names;

import lombok.extern.slf4j.Slf4j;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.CreateBucketRequest;
import software.amazon.awssdk.services.s3.model.CreateBucketResponse;

// TODO: Get app to read logging.properties file
@Slf4j
public class App {

    public static String getS3Bucket(S3Client s3, String bucketName) {
        CreateBucketRequest createBucketRequest = CreateBucketRequest.builder()
                .bucket(bucketName)
                .build();
        CreateBucketResponse createBucketResponse = s3.createBucket(createBucketRequest);
        return createBucketResponse.location();
    }

    public static void main(String[] args) throws ParseException, URISyntaxException, IOException {
        Injector injector = Guice.createInjector(new AppModule());
        Options options = new Options();
        options.addOption(Option.builder("u")
                .argName("uploadDir")
                .optionalArg(false)
                .hasArg()
                .desc("Directory of files to upload")
                .build());
        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args);
        String uploadDir = cmd.getOptionValue("u");
        log.info("Has upload dir " + uploadDir);
        DirectoryUploader uploader = injector.getInstance(DirectoryUploader.class);
        String bucketName = injector.getInstance(Key.get(String.class, Names.named(AppModule.S3_BUCKET_NAME_NAME)));
        List<String> s3Uris = uploader.upload(new File(uploadDir), bucketName);
        TranscriptionProcessor processor = injector.getInstance(TranscriptionProcessor.class);
        processor.process(s3Uris);
    }
}
