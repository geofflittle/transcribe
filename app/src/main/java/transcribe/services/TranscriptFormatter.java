package transcribe.services;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.inject.Inject;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateExceptionHandler;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import transcribe.aws.model.transcribe.Transcript;
import transcribe.model.TranscriptModel;

@Slf4j
@Value
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class TranscriptFormatter {

    private final ObjectMapper mapper;

    @SneakyThrows
    private Transcript parse(File file) {
        return mapper.readValue(file, Transcript.class);
    }

    @SneakyThrows
    private String getLatexContent(String documentTitle, String caseName, String filename, String transcriptContent) {
        Configuration cfg = new Configuration(Configuration.VERSION_2_3_31);
        cfg.setDirectoryForTemplateLoading(new File("src/main/resources/templates"));
        cfg.setDefaultEncoding("UTF-8");
        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        cfg.setLogTemplateExceptions(false);
        cfg.setWrapUncheckedExceptions(true);
        Template template = cfg.getTemplate("transcript-out.tex.ftl");
        try (StringWriter out = new StringWriter()) {
            template.process(TranscriptModel.builder()
                    .documentTitle(documentTitle)
                    .caseName(caseName)
                    .info("Transcriptions generated by Geoff Little\\\\(443) 926-4247 - g.little712@gmail.com")
                    .filename(filename)
                    .body(transcriptContent)
                    .build(), out);
            return out.toString();
        }
    }

    @SneakyThrows
    public void format(File inputAudioFile, String outputDir, String documentTitle, String caseName,
            String transcriptContent) {
        String latexFileName = String.format("/tmp/%s.tex", inputAudioFile.getName());
        String latexContent = getLatexContent(documentTitle, caseName, inputAudioFile.getName(), transcriptContent);
        Files.writeString(Path.of(latexFileName), latexContent);

        ProcessBuilder pb = new ProcessBuilder("pdflatex", latexFileName, "-output-directory", outputDir);
        pb.redirectErrorStream(true);
        Process p = pb.start();

        StringBuilder strBldr = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                strBldr.append(line);
            }
        }

        int exitCode = p.waitFor();
        String pdfLatexOutput = strBldr.toString();
        log.info("pdflatex output: ", pdfLatexOutput);
        if (exitCode != 0) {
            throw new RuntimeException(
                    String.format("Pandoc exited with error code: %s, message: %s", exitCode, pdfLatexOutput));
        }
    }

}
