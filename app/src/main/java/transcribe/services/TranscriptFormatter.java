package transcribe.services;

import java.io.File;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import com.google.inject.Inject;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateExceptionHandler;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import transcribe.model.TranscriptModel;

@Slf4j
@Value
@RequiredArgsConstructor(onConstructor = @__(@Inject))
public class TranscriptFormatter {

    private final static File TEMPLATE_DIR = new File("src/main/resources/templates");
    private final static String TEMPLATE_FILENAME = "transcript-out.tex.ftl";

    @SneakyThrows
    private String processLatexTemplate(String docTitle, String caseName, String audioFilename,
            String transcriptContent) {
        Configuration cfg = new Configuration(Configuration.VERSION_2_3_31);
        cfg.setDirectoryForTemplateLoading(TEMPLATE_DIR);
        cfg.setDefaultEncoding("UTF-8");
        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        cfg.setLogTemplateExceptions(true);
        cfg.setWrapUncheckedExceptions(true);
        Template template = cfg.getTemplate(TEMPLATE_FILENAME);
        StringWriter out = new StringWriter();
        log.info("Will process transcript template for {}", audioFilename);
        template.process(TranscriptModel.builder()
                .documentTitle(docTitle)
                .caseName(caseName)
                .info("Roughs generated by Geoff Little\\\\(443) 926-4247 - g.little712@gmail.com")
                .filename(audioFilename.replace("_", "\\_"))
                .body(transcriptContent)
                .build(), out);
        log.info("Did process transcript template for {}", audioFilename);
        return out.toString();
    }

    @SneakyThrows
    private String writeLatexFile(String audioFilename, String docTitle, String caseName, String content) {
        String latexFilename = String.format("/tmp/%s.tex", audioFilename);
        String latexContent = processLatexTemplate(docTitle, caseName, audioFilename, content);
        Path filePath = Paths.get(latexFilename);
        log.info("Will write transcript of {} to LaTeX file {}", audioFilename, latexFilename);
        Files.writeString(filePath, latexContent);
        log.info("Did write transcript of {} to LaTeX file {}", audioFilename, latexFilename);
        return latexFilename;
    }

    @SneakyThrows
    private Path compileLatexToPDF(Path outputDir, String latexFilename) {
        Files.createDirectories(outputDir);
        ProcessBuilder pb = new ProcessBuilder("pdflatex", "-output-directory", outputDir.toString(),
                "-interaction", "nonstopmode", latexFilename);
        pb.redirectErrorStream(true);
        Process process = pb.start();
        int exitCode = process.waitFor();
        String pdfLatexOutput = new String(process.getInputStream().readAllBytes());
        if (!pdfLatexOutput.isBlank()) {
            log.info("pdflatex process output: {}", pdfLatexOutput);
        }
        log.info("pdflatex process completed with exit code {}", exitCode);
        return outputDir.resolve(latexFilename);
    }

    public Path format(Path outputDir, String docTitle, String caseName,
            String audioFilename, String transcriptContent) {
        String outputLatexFilename = writeLatexFile(audioFilename, docTitle, caseName,
                transcriptContent);
        return compileLatexToPDF(outputDir, outputLatexFilename);
    }

}
